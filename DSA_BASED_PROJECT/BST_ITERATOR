/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    class BSTIterator{
        private:
        bool reverse;
        stack<TreeNode*> st;
        void pushall(TreeNode* root)
        {
            if(reverse)
            {
                while(root!=NULL)
                {
                    st.push(root);
                    root=root->right;
                }
            }
            else
            {
                while(root!=NULL)
                {
                    st.push(root);
                    root=root->left;
                }
            }
        }
        public:
        BSTIterator(TreeNode* root,bool reverse)
        {
            this->reverse=reverse;
            pushall(root);
        }
        bool hasNext(){ return !st.empty();}
        int next()
        {
            TreeNode* temp=st.top();
            st.pop();
            if(reverse) pushall(temp->left);
            else pushall(temp->right);
            return temp->val;
        }
    };
};
